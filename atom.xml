<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Jackong]]></title>
  <subtitle><![CDATA[书写我的人生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jackong.github.io//"/>
  <updated>2015-09-17T03:20:49.000Z</updated>
  <id>http://jackong.github.io//</id>
  
  <author>
    <name><![CDATA[Jackong]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在react中使用css]]></title>
    <link href="http://jackong.github.io/2015/09/17/react-css-in-js/"/>
    <id>http://jackong.github.io/2015/09/17/react-css-in-js/</id>
    <published>2015-09-17T02:46:39.000Z</published>
    <updated>2015-09-17T03:20:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="传统的css">传统的css</h2><hr>
<ul>
<li><p>一般是在html里面引入一个.css文件，或者写入一段</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">...</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>它没有变量，没有什么function，总之，够用，但不够强大、高效</p>
</li>
</ul>
<h2 id="进化的css">进化的css</h2><hr>
<ul>
<li><p>为了给css赋予更强大的力量，就有了<a href="http://lesscss.org/" target="_blank" rel="external">less</a>, <a href="http://sass-lang.com/" target="_blank" rel="external">sass/scss</a></p>
</li>
<li><p>这显然已经足够强大了，但依然没有解决另外一些问题</p>
<ul>
<li>全局命名空间</li>
<li>css名称不好压缩，一般css的压缩也只是去掉空格注释，而class，id之类的命名还是被保留</li>
<li>在组件化的时代，把css单独开来不好管理，维护和复用</li>
<li>…</li>
</ul>
</li>
</ul>
<h2 id="inline_styles">inline styles</h2><hr>
<ul>
<li><p>facebook的解决方法<a href="https://speakerdeck.com/vjeux/react-css-in-js" target="_blank" rel="external">react-css-in-js</a></p>
</li>
<li><p>于是，在react的世界里，便有了这些优秀的开源项目来尝试解决这些问题</p>
<ul>
<li><a href="https://github.com/js-next/react-style" target="_blank" rel="external">react-style</a></li>
<li><a href="https://github.com/FormidableLabs/radium" target="_blank" rel="external">radium</a></li>
<li><a href="https://github.com/casesandberg/reactcss" target="_blank" rel="external">reactcss</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>WEB的世界很精彩，WEB的世界很惊人</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[inline styles]]>
    
    </summary>
    
      <category term="css" scheme="http://jackong.github.io/tags/css/"/>
    
      <category term="react" scheme="http://jackong.github.io/tags/react/"/>
    
      <category term="frontend" scheme="http://jackong.github.io/categories/frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用webpack + react开发]]></title>
    <link href="http://jackong.github.io/2015/09/10/use-webpack-for-react/"/>
    <id>http://jackong.github.io/2015/09/10/use-webpack-for-react/</id>
    <published>2015-09-10T09:06:52.000Z</published>
    <updated>2015-09-10T09:48:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="使用-jsx后缀">使用.jsx后缀</h2><hr>
<blockquote>
<p>让webpack支持各种js后缀</p>
</blockquote>
<ul>
<li>webpack.config.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">           extensions: [<span class="string">''</span>, <span class="string">'.json'</span>, <span class="string">'.node'</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用ES6语法">使用ES6语法</h2><hr>
<blockquote>
<p>npm i –save-dev <a href="http://babeljs.io" target="_blank" rel="external">babel-loader</a></p>
</blockquote>
<ul>
<li>webpack.config.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">         loaders: [</span><br><span class="line">             &#123;</span><br><span class="line">                 test: <span class="regexp">/\.jsx?$/</span>, loader: <span class="string">'babel'</span>, exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">             &#125;</span><br><span class="line">         ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用vendor">使用vendor</h2><hr>
<h3 id="使用vendor的好处">使用vendor的好处</h3><hr>
<ul>
<li>使用vendor可以把一些公共的module打包到一起，避免重复打包，提交效率</li>
<li>vendor一般属于非业务module，基本不会修改，可以被缓存，当只有业务代码变动时，避免不必要的请求</li>
</ul>
<h3 id="配置">配置</h3><hr>
<ul>
<li><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./index.jsx'</span>,</span><br><span class="line">        vendor: [</span><br><span class="line">            <span class="string">'react'</span>,</span><br><span class="line">            <span class="string">'react-router'</span>,</span><br><span class="line">            <span class="string">'react-bootstrap'</span>,</span><br><span class="line">            <span class="string">'alt'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name]/index.js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[name]/index.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'vendor'</span>, <span class="string">'vendor/app.js'</span>, [<span class="string">'app'</span>]),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"./js/vendor/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"./js/app/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="使用CDN">使用CDN</h2><hr>
<blockquote>
<p>除了vendor，我们还可以使用CDN</p>
</blockquote>
<ul>
<li><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    externals: &#123;<span class="comment">//这个配置在编写module时也会被用到，相当于延迟给调用者去加载</span></span><br><span class="line">        <span class="string">'react'</span>: <span class="string">'React'</span>,</span><br><span class="line">        <span class="string">'react-router'</span>: <span class="string">'ReactRouter'</span>,</span><br><span class="line">        <span class="string">'react-bootstrap'</span>: <span class="string">'ReactBootstrap'</span>,</span><br><span class="line">        <span class="string">'alt'</span>: <span class="string">'Alt'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.bootcss.com/react/0.13.3/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.bootcss.com/react-router/0.13.3/ReactRouter.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.bootcss.com/react-bootstrap/0.24.5/react-bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdn.bootcss.com/alt/0.17.1/alt.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="自动实时刷新">自动实时刷新</h2><hr>
<blockquote>
<p>npm i –save-dev react-hot-loader</p>
</blockquote>
<ul>
<li><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./index.jsx'</span>,</span><br><span class="line">        vendor: [</span><br><span class="line">            <span class="string">'react'</span>,</span><br><span class="line">            <span class="string">'react-router'</span>,</span><br><span class="line">            <span class="string">'react-bootstrap'</span>,</span><br><span class="line">            <span class="string">'alt'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/public/js/'</span>,</span><br><span class="line">        publicPath: <span class="string">'/public/js/'</span>,</span><br><span class="line">        filename: <span class="string">'[name]/index.js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[name]/index.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">         loaders: [</span><br><span class="line">             &#123;</span><br><span class="line">                 test: <span class="regexp">/\.jsx?$/</span>, loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel'</span>], exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">             &#125;</span><br><span class="line">         ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>server.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> WebpackDevServer(webpack(config), &#123;</span><br><span class="line">  publicPath: config.output.publicPath,</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  historyApiFallback: <span class="literal">true</span></span><br><span class="line">&#125;).listen(PORT, <span class="string">'0.0.0.0'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">    process.exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening at 0.0.0.0:'</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Debugger">Debugger</h2><hr>
<blockquote>
<p>这是我的最爱，通过source-map直接对源代码进行debugger，分分钟定位问题</p>
</blockquote>
<ul>
<li>webpack.config.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    devtool: <span class="string">'#source-map'</span>,</span><br><span class="line">    debug: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="使用-jsx后缀">使用.jsx后缀</h2><hr>
<blockquote>
<p>让webpack支持各种js后缀</p>
</blockquote>
<ul>
<li>webpack.config.js<figure class="highlight js]]>
    </summary>
    
      <category term="react" scheme="http://jackong.github.io/tags/react/"/>
    
      <category term="webpack" scheme="http://jackong.github.io/tags/webpack/"/>
    
      <category term="frontend" scheme="http://jackong.github.io/categories/frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何『瞬间』迁移在用大资源]]></title>
    <link href="http://jackong.github.io/2015/08/05/migrate-big-resource-immediately/"/>
    <id>http://jackong.github.io/2015/08/05/migrate-big-resource-immediately/</id>
    <published>2015-08-05T13:49:56.000Z</published>
    <updated>2015-08-05T13:53:55.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>想像一下，目录/var/www/app/public/upload被用于资源上传存放。<br>起初，用户量不大，看起来没什么问题。可是用户越来越多了，这里的空间越占越大，慢慢地接近100%。</p>
</blockquote>
<p>此时，我们需要将这些资源转移：</p>
<ul>
<li>将资源转移到另一大磁盘，如：/data下（简单，影响小）</li>
<li>转移到云存储服务（七牛，阿里云等）（麻烦，牵动大）【其实一开始就应该使用云服务】</li>
</ul>
<p>现阶段，我选了前者；当然，对于改革，我从未放弃。</p>
<p>考虑到/var和/data是两个不同文件系统。</p>
<blockquote>
<p>假设使用：</p>
<ul>
<li>mv /var/www/app/public/upload /data/resource/upload</li>
<li>ln -s /data/resource/upload /var/www/app/public/upload<br>则会在mv会先拷贝，再将原有文件删除，整个过程漫长之极，即便选择访问最少时间段，也容易造成影响。</li>
</ul>
</blockquote>
<p>显然，这方法不靠谱；最后，我的做法是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">rsync -av /var/www/app/public/upload /data/resource/</span><br><span class="line">rsync -av /var/www/app/public/upload /data/resource/</span><br><span class="line">mv /var/www/app/public/upload /var/www/app/public/upload.bk</span><br><span class="line">ln <span class="operator">-s</span> /data/resource/upload /var/www/app/public/upload</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>因为前面已经做了第一次rsync，第二次rsync其实速度会非常快（几乎瞬间），此时将mv移动到同目录下（同文件系统），其实是重命名（也是瞬间），最后，ln软链回去（同时也是瞬间完成）</p>
</blockquote>
<p>job done!</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>想像一下，目录/var/www/app/public/upload被用于资源上传存放。<br>起初，用户量不大，看起来没什么问题。可是用户越来越多了，这里的空间越占越大，慢慢地接近100%。</p>
</blockquote>
<p>此时，我们需要]]>
    </summary>
    
      <category term="migration" scheme="http://jackong.github.io/tags/migration/"/>
    
      <category term="backend" scheme="http://jackong.github.io/categories/backend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql主从复制]]></title>
    <link href="http://jackong.github.io/2015/08/05/mysql-master-slave-replication/"/>
    <id>http://jackong.github.io/2015/08/05/mysql-master-slave-replication/</id>
    <published>2015-08-05T13:19:34.000Z</published>
    <updated>2015-08-05T13:43:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题"><em>问题</em></h2><p>新到公司不久，事故起因于另一开发人员，在实施定期手工备份时，误将<code>导出</code>操作为<code>导入</code>，使数据库被还原于上一次（约半个月前）导出的数据。</p>
<p>经过查实，发现我们所使用的mysql竟没有开启binlog备份，无从还原。</p>
<blockquote>
<p>这半个月的数据本来就来之不易，更何况作为初创公司，简直致命，如果无法还原，公司很可能面临<strong>关门</strong>。</p>
</blockquote>
<p>幸好，因为使用的是阿里云服务器，它每天定时备份，使得可以将大部分数据恢复。</p>
<hr>
<h2 id="方案"><em>方案</em></h2><p>自动化备份方案选择：</p>
<ul>
<li>A: 自动定时export数据进行备份（简单粗暴，无法完整恢复）</li>
<li>B: 使用binlog，实时备份数据（简单可用，无法灾难恢复）</li>
<li>C: 使用master-slave，实时双机备份数据（比较靠谱，双机保障）</li>
<li>D: 主主复制（目前没这个必要）或一主多从等其它方案（初创公司资源不多，虽然阿里云机器也不贵）</li>
</ul>
<p>综上，采用了方案C：</p>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.5/en/replication-howto.html" target="_blank" rel="external">参考官方文档</a></li>
<li>在docker上模拟场景（主要是<strong>已有数据基础上及<a href="https://dev.mysql.com/doc/refman/5.5/en/point-in-time-recovery.html" target="_blank" rel="external">数据恢复</a></strong>）进行主从复制研究测试，确保理解无误，方案正确</li>
<li>整理整个操作流程，确保思路清晰正确</li>
<li>将大部分操作shell化并测试无误，方便实施时直接使用，避免手误</li>
<li>选定数据操作最少时间段实施方案</li>
</ul>
<blockquote>
<ul>
<li>虽然模拟场景并测试充分，但方案实施时依然遇到一个插(wen)曲(ti)：出现check-sum问题。</li>
<li>原因：我只查看了master机器的mysql版本为5.5.19，于是模拟场景也是基于master和slave都是这个版本进行测试，然而slave上的版本是5.4，无此特性。最后，直接升级slave版本到5.519解决之。</li>
</ul>
</blockquote>
<p>至此，方案实施完成，并在随后几天连续确认状态是否正常。</p>
<h2 id="总结"><em>总结</em></h2><blockquote>
<ul>
<li>线上数据库部署时，切记开启自动备份机制。</li>
<li>初创公司一般无运维，开发人员应当承担起这份责任。</li>
<li>作为开发者，尽可能让所有可自动化的事情自动化，高效之道也。</li>
</ul>
</blockquote>
<h2 id="操作流程图"><em>操作流程图</em></h2><p><img src="http://7xkwtq.com1.z0.glb.clouddn.com/replication.png" alt="主从同步"></p>
]]></content>
    <summary type="html">
    <![CDATA[在已有数据基础上实施mysql主从复制备份]]>
    
    </summary>
    
      <category term="mysql" scheme="http://jackong.github.io/tags/mysql/"/>
    
      <category term="replication" scheme="http://jackong.github.io/tags/replication/"/>
    
      <category term="DB" scheme="http://jackong.github.io/categories/DB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[让参数校验自动化]]></title>
    <link href="http://jackong.github.io/2015/08/02/auto-valid-input/"/>
    <id>http://jackong.github.io/2015/08/02/auto-valid-input/</id>
    <published>2015-08-02T13:31:35.000Z</published>
    <updated>2015-08-05T13:54:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>每次看到其它开发人员，在打一些重复的代码，我都有种深恶痛绝，不想参与进去的想法，隐隐感觉会被对方拖垮我的效率。</p>
</blockquote>
<h3 id="最常见的参数校验">最常见的参数校验</h3><ul>
<li>我想，这是最常见的做法（我称之为CIERR[Check-If-Error-Return-Repeatedly]）：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!data.account) &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data.account.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isEmail(data.account)) &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isMobilePhone(data.account)) &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isXXX(data.account)) &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something</span></span><br></pre></td></tr></table></figure>
<ul>
<li>然而，这些其它都可以被自动化，简化，使我们的代码更专注于业务逻辑的开发：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//It will throw exception if the account is invalid.</span></span><br><span class="line"><span class="comment">//And, the isValidAccount can be reused.</span></span><br><span class="line"><span class="keyword">var</span> account  = input(data, <span class="string">'account'</span>, isValidAccount, <span class="comment">/*default value*/</span>, error);</span><br><span class="line"><span class="comment">//do something</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中，<br>data为数据源；<br>account为data的key；<br>isValidAccount是一个pattern，支持RegExp|Array|Function|Object|String；<br>第3个参数是默认值，可用于在校验失败时，给予返回；<br>error是但校验失败是throw的error信息。</p>
</blockquote>
<p>最后，我封装了一个js通用的module：<a href="https://github.com/Jackong/no-input" target="_blank" rel="external">no-input</a> 和一个koa的middleware：<a href="https://github.com/Jackong/koa-input" target="_blank" rel="external">koa-input</a>。</p>
<p>你会发现，一切都是那么自然，简洁，并强大。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>每次看到其它开发人员，在打一些重复的代码，我都有种深恶痛绝，不想参与进去的想法，隐隐感觉会被对方拖垮我的效率。</p>
</blockquote>
<h3 id="最常见的参数校验">最常见的参数校验</h3><ul>
<li>我想，这是最常见的做]]>
    </summary>
    
      <category term="node.js" scheme="http://jackong.github.io/tags/node-js/"/>
    
      <category term="php" scheme="http://jackong.github.io/tags/php/"/>
    
      <category term="backend" scheme="http://jackong.github.io/categories/backend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用React构建Web App]]></title>
    <link href="http://jackong.github.io/2015/07/31/react-web-app/"/>
    <id>http://jackong.github.io/2015/07/31/react-web-app/</id>
    <published>2015-07-31T07:54:58.000Z</published>
    <updated>2015-09-10T09:08:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="从Angular到React">从Angular到React</h3><blockquote>
<p>在使用React之前，我兴奋地使用着Angular。</p>
</blockquote>
<ul>
<li>它们的区别<ul>
<li>Angular是一个全能框架。（MVVM）</li>
<li>而React则不是，它只是一个View，一个模块。</li>
<li>使用它，你还有依赖其它第三方模块。如：HTTP请求模块<a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">Axios</a>，Flux单向数据流模块<a href="https://github.com/spoike/refluxjs" target="_blank" rel="external">Reflux</a>等等。</li>
</ul>
</li>
</ul>
<ul>
<li>看中React的理由<ul>
<li>移动开发（<a href="https://facebook.github.io/react-native" target="_blank" rel="external">React-Native</a> 一处编码，到处运行；一门语言，全端开发）</li>
<li>廉价的渲染能力（<a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="external">virtual-dom</a>）</li>
<li>模块化（像写Node.js写前端代码，在我的经历中，前端的代码总是看起来很混乱，缺少后端开发者的思想）</li>
<li>职责单一（一个模块做一件事，插件式开发，专业灵活）</li>
<li>组件化（实现view层的可复用性）</li>
</ul>
</li>
</ul>
<hr>
<h3 id="React的『坑』，一个萝卜一个坑">React的『坑』，一个萝卜一个坑</h3><blockquote>
<p>没有无坑的『萝卜』，也没有填不了的坑。</p>
</blockquote>
<ul>
<li><p>优点也会是『坑』</p>
<ul>
<li>因为render太廉价，所以在使用<a href="https://github.com/rackt/react-router" target="_blank" rel="external">react-route</a>时，只要url一变化，React都会re-render。<br>这就导致了当浏览器back历史的时候，也会被重新渲染！<br>数据会重新请求，页面位置被重置（当数据请求没那么快时），完全没有cache。</li>
</ul>
</li>
<li><p>but，换一种思维开发，那不算坑</p>
<ul>
<li>你是否知道AMD，CMD，Gulp，Webpack，SASS，DI，Promise，Data-Flow，Generator-Function 这些利器？</li>
<li>如果你还停留在JQuery的年代，那是你给自己挖的坑。哦，不，是井。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="路在哪，走出来">路在哪，走出来</h3><blockquote>
<p>路是人走出来的。</p>
</blockquote>
<p>将React应用在微信公众号项目上，已快上线了。<br>然而，这只是第一步。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="从Angular到React">从Angular到React</h3><blockquote>
<p>在使用React之前，我兴奋地使用着Angular。</p>
</blockquote>
<ul>
<li>它们的区别<ul>
<li>Angular是一个全能框]]>
    </summary>
    
      <category term="react" scheme="http://jackong.github.io/tags/react/"/>
    
      <category term="web-app" scheme="http://jackong.github.io/tags/web-app/"/>
    
      <category term="frontend" scheme="http://jackong.github.io/categories/frontend/"/>
    
  </entry>
  
</feed>